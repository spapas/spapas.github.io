<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>/var/ - pelican</title><link href="https://spapas.github.io/" rel="alternate"></link><link href="https://spapas.github.io/feeds/pelican.atom.xml" rel="self"></link><id>https://spapas.github.io/</id><updated>2013-10-07T10:20:00+03:00</updated><subtitle>Various programming stuff</subtitle><entry><title>Using pelican to generate static sites on windows</title><link href="https://spapas.github.io/2013/10/07/pelican-static-windows/" rel="alternate"></link><published>2013-10-07T10:20:00+03:00</published><updated>2013-10-07T10:20:00+03:00</updated><author><name>Serafeim Papastefanos</name></author><id>tag:spapas.github.io,2013-10-07:/2013/10/07/pelican-static-windows/</id><summary type="html">&lt;p class="first last"&gt;A quick and dirty tutorial for generating a static site with pelican on Windows and hosting it to github.io as&amp;nbsp;username.github.io.&lt;/p&gt;
</summary><content type="html">&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title"&gt;&lt;a class="reference internal" href="#top"&gt;Contents&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#introduction" id="toc-entry-1"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#installing-pelican-and-generating-a-skeleton-for-your-site" id="toc-entry-2"&gt;Installing pelican and generating a skeleton for your&amp;nbsp;site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#modifying-pelican-tools-for-windows" id="toc-entry-3"&gt;Modifying pelican tools for&amp;nbsp;windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#configuration-of-your-skeleton-site" id="toc-entry-4"&gt;Configuration of your skeleton site&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#settings" id="toc-entry-5"&gt;Settings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#themes" id="toc-entry-6"&gt;Themes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#plugins" id="toc-entry-7"&gt;Plugins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#hosting-in-github-pages" id="toc-entry-8"&gt;Hosting in github&amp;nbsp;pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#publishing-changes" id="toc-entry-9"&gt;Publishing&amp;nbsp;changes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-1"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.getpelican.com/en/3.3.0/"&gt;Pelican&lt;/a&gt; is a great static site generator. A static site generator is a tool that users a number of input files to
generate a complete html site. No database or server side scripting is needed for the resulting site, that&amp;#8217;s why
many such sites are hosted on &lt;a class="reference external" href="http://pages.github.com/"&gt;github pages&lt;/a&gt; (more on this&amp;nbsp;later).&lt;/p&gt;
&lt;p&gt;The input contains a number of html templates, css styles and the actual content of the site which most of the time is written in a
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Lightweight_markup_language"&gt;lightweight markup language&lt;/a&gt; like &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;reStructuredText&lt;/a&gt; or &lt;a class="reference external" href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt;. The static site generator will generate the static pages by
inserting the content in the appropriate places in the&amp;nbsp;templates.&lt;/p&gt;
&lt;p&gt;In the following sections we will describe the installation of pelican on Windows
and the creation of the spapas.github.io&amp;nbsp;site.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-pelican-and-generating-a-skeleton-for-your-site"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-2"&gt;Installing pelican and generating a skeleton for your&amp;nbsp;site&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The official pelican quickstart can be found in &lt;a class="reference external" href="http://docs.getpelican.com/en/latest/getting_started.html"&gt;http://docs.getpelican.com/en/latest/getting_started.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To install pelican just&amp;nbsp;enter:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;gt;pip install pelican
&lt;/pre&gt;
&lt;p&gt;After installing pelican, I propose creating a parent directory that will
contain all your pelican sites, along with extra themes and plugins like&amp;nbsp;this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pelican/
  ├── pelican-themes
  ├── other-pelican-theme
  ├── spapas.github.io
  └── other-sites
&lt;/pre&gt;
&lt;p&gt;After creating the pelican directory just go in it with a command line and run the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pelican-quickstart&lt;/span&gt;&lt;/tt&gt; command.
It will ask you a number of questions, take a look at how I did answer&amp;nbsp;these:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
pelican&amp;gt;pelican-quickstart
Welcome to pelican-quickstart v3.2.2.

This script will help you create a new Pelican-based website.

Please answer the following questions so this script can generate the files
needed by Pelican.


&amp;gt; Where do you want to create your new web site? [.] spapas.github.io
&amp;gt; What will be the title of this web site? Test github.io
&amp;gt; Who will be the author of this web site? Serafeim
&amp;gt; What will be the default language of this web site? [en]
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   (Y/n)
&amp;gt; What is your URL prefix? (see above example; no trailing slash) http://spapas.github.io
&amp;gt; Do you want to enable article pagination? (Y/n)
&amp;gt; How many articles per page do you want? [10]
&amp;gt; Do you want to generate a Makefile to easily manage your website? (Y/n) n
&amp;gt; Do you want an auto-reload &amp;amp; simpleHTTP script to assist with theme and site development? (Y/n) n
Done. Your new project is available at C:\progr\py\pelican\spapas.github.io
&lt;/pre&gt;
&lt;p&gt;After that, you will have a pelican/spapas.github.io folder that will contain the following&amp;nbsp;content:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
spapas.github.io/
  ├── content
  ├── output
  ├── pelicanconf.py
  └── publishconf.py
&lt;/pre&gt;
&lt;p&gt;The content folder will contain your content (rst or markdown), the output will contain the generated html after you run pelican for your site.
The &lt;tt class="docutils literal"&gt;pelicanconf.py&lt;/tt&gt; will have a number of options for the generation of the development version of your site while the &lt;tt class="docutils literal"&gt;publishconf.py&lt;/tt&gt; will override some of the options
of &lt;tt class="docutils literal"&gt;pelicanconf.py&lt;/tt&gt; before generating the production version of your site that will actually be uploaded to github&amp;nbsp;pages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="modifying-pelican-tools-for-windows"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-3"&gt;Modifying pelican tools for&amp;nbsp;windows&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Pelican uses a Makefile and a unix shell script to generate the static html files and start an http server for development.
Because I prefer to use windows, I answered no to the questions of generating these when pelican-quickstarte asked me.
Instead I have included the following files inside the spapas.github.io&amp;nbsp;directory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;pelrun.bat&lt;/tt&gt;, to generate the content for your debug site in the output&amp;nbsp;directory:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;
pelican content --debug --autoreload  --output output --settings pelicanconf.py
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;pelserve.bat&lt;/tt&gt;, to localy serve the generated debug&amp;nbsp;site:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;
pushd output
python -m pelican.server
popd
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;pelpub.bat&lt;/tt&gt;, to generate the production site in the output&amp;nbsp;directory:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;
pelican content --output output --settings publishconf.py
&lt;/pre&gt;
&lt;p&gt;Now, when you want to develop your site locally,&amp;nbsp;enter:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
spapas.github.io&amp;gt;start pelrun.bat
spapas.github.io&amp;gt;start pelserv.bat
&lt;/pre&gt;
&lt;p&gt;If everything was ok until now, you can visit &lt;a class="reference external" href="http://127.0.0.1:8000"&gt;http://127.0.0.1:8000&lt;/a&gt; and will get the following&amp;nbsp;output:&lt;/p&gt;
&lt;img alt="all ok!" src="/images/site1.png" style="width: 780px;" /&gt;
&lt;p&gt;Because of the -r option that is used in &lt;tt class="docutils literal"&gt;pelrun.bat&lt;/tt&gt; whenever you do a change (for instance when you add an rst file in the content directory)
it will be discovered and the output will be changed&amp;nbsp;immediately!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configuration-of-your-skeleton-site"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-4"&gt;Configuration of your skeleton&amp;nbsp;site&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="settings"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-5"&gt;Settings&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There is a number of settings that you may configure in your site. The pelican settings reference can be found here: &lt;a class="reference external" href="http://docs.getpelican.com/en/latest/settings.html"&gt;http://docs.getpelican.com/en/latest/settings.html&lt;/a&gt;.
The pelicanconf.py and publishconf.py for this site can be found&amp;nbsp;here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/spapas/spapas.github.io/blob/source/pelicanconf.py"&gt;https://github.com/spapas/spapas.github.io/blob/source/pelicanconf.py&lt;/a&gt;
&lt;a class="reference external" href="https://github.com/spapas/spapas.github.io/blob/source/publishconf.py"&gt;https://github.com/spapas/spapas.github.io/blob/source/publishconf.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The most important difference is the RELATIVE_URLS directive which must be True to the debug and False to the&amp;nbsp;production.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="themes"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-6"&gt;Themes&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Beyond the default pelican theme, you can use configure pelican to use various other themes. To enable them, go to your pelican parent directory and clone the pelican-themes github&amp;nbsp;repository:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
pelican&amp;gt;git clone https://github.com/getpelican/pelican-themes.git
&lt;/pre&gt;
&lt;p&gt;After that, you may select your theme from&amp;nbsp;pelicanconf.py:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
THEME = &amp;quot;../pelican-themes/theme-name&amp;quot;
&lt;/pre&gt;
&lt;p&gt;In my configuration, I am using the Octopress Theme for Pelican, which you may get from here &lt;a class="reference external" href="https://github.com/duilio/pelican-octopress-theme"&gt;https://github.com/duilio/pelican-octopress-theme&lt;/a&gt;. Just clone it to your
pelican directory and refer to it as&amp;nbsp;above.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="plugins"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-7"&gt;Plugins&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Pelican has a number of plugins. To enable them, go to your pelican parent directory and clone the pelican-plugins github&amp;nbsp;repository:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
pelican&amp;gt;git clone https://github.com/getpelican/pelican-plugins.git
&lt;/pre&gt;
&lt;p&gt;After that, you may add the following two lines to your&amp;nbsp;pelicanconf.py:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
PLUGIN_PATH = '../pelican-plugins'
PLUGINS = ['a-plugin']
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="hosting-in-github-pages"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-8"&gt;Hosting in github&amp;nbsp;pages&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To host your static site in github pages you must first of all create a repository named
username.github.io (for instance spapas.github.io) from&amp;nbsp;github.&lt;/p&gt;
&lt;p&gt;Then, generate your production&amp;nbsp;output:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
spapas.github.io&amp;gt;pelpub.bat
&lt;/pre&gt;
&lt;p&gt;Finally, go to your output directory, create a git repository, add everything and push it to your&amp;nbsp;repository:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
spapas.github.io\output&amp;gt;git init
spapas.github.io\output&amp;gt;git add .
spapas.github.io\output&amp;gt;git commit -m Initial
spapas.github.io\output&amp;gt;git remote add origin https://github.com/spapas/spapas.github.io.git
spapas.github.io\output&amp;gt;git push origin master --force
&lt;/pre&gt;
&lt;p&gt;The &amp;#8212;force is to overwrite any previous versions - you don&amp;#8217;t care about version control on your output (but you want it on your&amp;nbsp;source).&lt;/p&gt;
&lt;p&gt;You can now visit &lt;a class="reference external" href="http://username.github.io"&gt;http://username.github.io&lt;/a&gt; and see your statically generated site&amp;nbsp;!&lt;/p&gt;
&lt;p&gt;Don&amp;#8217;t forget to add your source to the version control! To do that, add a .gitignore file in your pelican/username.github.io direcory
containing the&amp;nbsp;following:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
output
&lt;/pre&gt;
&lt;p&gt;The above file will ignore the contents of the output directory from version control. After that, do the&amp;nbsp;following:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
spapas.github.io&amp;gt;git init
spapas.github.io&amp;gt;git add .
spapas.github.io&amp;gt;git commit -m Initial
spapas.github.io&amp;gt;git branch -m master source
spapas.github.io&amp;gt;git remote add origin https://github.com/spapas/spapas.github.io.git
spapas.github.io&amp;gt;git push origin source
&lt;/pre&gt;
&lt;p&gt;The above will rename the master branch to source, will attach the origin remote to &lt;a class="reference external" href="https://github.com/spapas/spapas.github.io.git"&gt;https://github.com/spapas/spapas.github.io.git&lt;/a&gt; and will push the source
branch to it. Now you will have two branches in your username.github.io repository. One
named origin/master that will be your actual site and will be displayed through &lt;a class="reference external" href="http://username.github.io"&gt;http://username.github.io&lt;/a&gt; and one named origin/source that will contain the source of your&amp;nbsp;site.&lt;/p&gt;
&lt;p&gt;To learn more about branches and remotes you may check out &lt;a class="reference external" href="https://spapas.github.io/2013/10/08/git-branches/"&gt;the git branches article&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="publishing-changes"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-9"&gt;Publishing&amp;nbsp;changes&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Whenever you need to publish a new article or do changes to an existing one, you need to do the&amp;nbsp;following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Run pelpub.bat to create the new&amp;nbsp;output&lt;/li&gt;
&lt;li&gt;Add/commit and push changes from your pelican site(source) folder to the source&amp;nbsp;remote&lt;/li&gt;
&lt;li&gt;Add/commit and push changes from your output folder to the master&amp;nbsp;remote&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To help with this, here&amp;#8217;s a ghdeploy.bat file that does all the&amp;nbsp;above:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
call pelpub.bat
git add -A
git commit -m &amp;quot;Deploying changes&amp;quot;
git push origin source
pushd output
git add -A
git commit -m &amp;quot;Deploying changes&amp;quot;
git push origin master
popd
&lt;/pre&gt;
&lt;p&gt;If you&amp;#8217;ve followed this far, by running &lt;tt class="docutils literal"&gt;pelpub.bat&lt;/tt&gt; you&amp;#8217;ll need to enter your github repository credentials (twice) and then
everything (source and master) will be deployed! To make things even better, I propose to use &lt;a class="reference external" href="https://help.github.com/articles/generating-ssh-keys/"&gt;ssh based authentication&lt;/a&gt;
to your github account and add new remote names to your source and master by running the&amp;nbsp;following:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
git remote add origin2 git&amp;#64;github.com:spapas/spapas.github.io.git
&lt;/pre&gt;
&lt;p&gt;to your pelican site and the output directories. After you change ghdeploy.bat to use &lt;tt class="docutils literal"&gt;origin2&lt;/tt&gt; instead of &lt;tt class="docutils literal"&gt;origin&lt;/tt&gt; you&amp;#8217;ll be
able to deploy everything with just running it without entering any&amp;nbsp;credentials!&lt;/p&gt;
&lt;/div&gt;
</content><category term="pelican"></category><category term="static-html"></category><category term="github.io"></category><category term="github"></category><category term="pelican"></category><category term="windows"></category><category term="python"></category><category term="github-pages"></category><category term="rst"></category></entry></feed>