<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>/var/ - clojure</title><link href="https://www.spapas.net/" rel="alternate"></link><link href="https://www.spapas.net/feeds/clojure.atom.xml" rel="self"></link><id>https://www.spapas.net/</id><updated>2022-04-14T11:20:00+03:00</updated><subtitle>Various programming stuff</subtitle><entry><title>Using clojure fromÂ Windows</title><link href="https://www.spapas.net/2022/04/14/clojure-windows/" rel="alternate"></link><published>2022-04-14T11:20:00+03:00</published><updated>2022-04-14T11:20:00+03:00</updated><author><name>Serafeim Papastefanos</name></author><id>tag:www.spapas.net,2022-04-14:/2022/04/14/clojure-windows/</id><summary type="html">&lt;p class="first last"&gt;How to install and use clojure from&amp;nbsp;Windows&lt;/p&gt;
</summary><content type="html">&lt;p&gt;In this small article I&amp;#8217;m going to post a guide on how to install and use clojure from Windows using good old&amp;#8217;&amp;nbsp;cmd.exe.&lt;/p&gt;
&lt;p&gt;Unfortunately, most guides on the official clojure site have instructions on using Clojure from Windows through Powershell or &lt;span class="caps"&gt;WSL&lt;/span&gt;.
For my own reasons I hate both these approaches and only use the cmd.exe to interact with the Windows command&amp;nbsp;line.&lt;/p&gt;
&lt;p&gt;There are more or less two approaches to using clojure. Using &lt;a class="reference external" href="https://leiningen.org/"&gt;leiningen&lt;/a&gt; or using the clj tools.
The clojure official guide seems to be &lt;cite&gt;biased towards clj tools&lt;/cite&gt;. However I think that leiningen may be easier for new users.
I&amp;#8217;ll cover both approaches&amp;nbsp;here.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Warning&lt;/em&gt; Before doing anything else please make sure to install Java. You need a version of java that is at least 1.8. Try running
&lt;tt class="docutils literal"&gt;java &lt;span class="pre"&gt;-version&lt;/span&gt;&lt;/tt&gt; in cmd.exe to make sure you have java and it is the correct&amp;nbsp;version.&lt;/p&gt;
&lt;div class="section" id="leiningen"&gt;
&lt;h2&gt;Leiningen&lt;/h2&gt;
&lt;p&gt;To install leiningen you just download the lein.bat file from their page and put it in a folder in your &lt;span class="caps"&gt;PATH&lt;/span&gt;. You&amp;#8217;ll then run
lein and it will download all dependencies and install&amp;nbsp;itself!&lt;/p&gt;
&lt;p&gt;To start a clojure repl to be able to play with clojure you write &lt;tt class="docutils literal"&gt;lein repl&lt;/tt&gt;. If everything went smooth you should see a prompt
and if you write &lt;tt class="docutils literal"&gt;(+ 1 2)&lt;/tt&gt; you should get &lt;tt class="docutils literal"&gt;3&lt;/tt&gt;. To exit press &lt;tt class="docutils literal"&gt;ctrl+d&lt;/tt&gt; or write &lt;tt class="docutils literal"&gt;exit&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;To start a new project you&amp;#8217;ll use &lt;tt class="docutils literal"&gt;lein new [template name] [project name]&lt;/tt&gt;. For example, to create a new app you&amp;#8217;ll write:
&lt;tt class="docutils literal"&gt;lein new app leinapp&lt;/tt&gt;. You&amp;#8217;ll get a new directory called &lt;tt class="docutils literal"&gt;leinapp&lt;/tt&gt;. The important stuff in this directory&amp;nbsp;are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;project.clj&lt;/tt&gt;: The basic descriptor of your project; here you can set various attrs of your project and also add&amp;nbsp;dependencies&lt;/li&gt;
&lt;li&gt;src\leinapp: The source directory of your project. This is where you&amp;#8217;ll put your&amp;nbsp;code.&lt;/li&gt;
&lt;li&gt;test\leinapp: Add tests&amp;nbsp;here&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There should be a &lt;tt class="docutils literal"&gt;core.clj&lt;/tt&gt; file inside your src\leinapp folder. The &lt;tt class="docutils literal"&gt;main&lt;/tt&gt; function is the entry point of the app. Try running
&lt;tt class="docutils literal"&gt;lein run&lt;/tt&gt; from the project folder and you should get the output of the &lt;tt class="docutils literal"&gt;main&lt;/tt&gt; function.&lt;/p&gt;
&lt;p&gt;Add this to the end of the &lt;tt class="docutils literal"&gt;core.clj&lt;/tt&gt; to define a &lt;tt class="docutils literal"&gt;foo&lt;/tt&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And run &lt;tt class="docutils literal"&gt;lein repl&lt;/tt&gt;. You should get a repl command prompt for your application
in the &lt;tt class="docutils literal"&gt;leinapp.core&lt;/tt&gt; namespace (if you named your app &lt;tt class="docutils literal"&gt;leinapp&lt;/tt&gt;). Type
&lt;tt class="docutils literal"&gt;(foo)&lt;/tt&gt; and you should see &lt;tt class="docutils literal"&gt;&amp;quot;bar&amp;quot;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;To create a stand alone jar with your code (called &lt;em&gt;uberjar&lt;/em&gt;) you can use &lt;tt class="docutils literal"&gt;lein uberjar&lt;/tt&gt;. This will create a file
named &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;target\uberjar\leinapp-0.1.0-&lt;span class="caps"&gt;SNAPSHOT&lt;/span&gt;-standalone.jar&lt;/span&gt;&lt;/tt&gt;. Then try &lt;tt class="docutils literal"&gt;java &lt;span class="pre"&gt;-jar&lt;/span&gt; &lt;span class="pre"&gt;target\uberjar\leinapp-0.1.0-&lt;span class="caps"&gt;SNAPSHOT&lt;/span&gt;-standalone.jar&lt;/span&gt;&lt;/tt&gt;
(notice I&amp;#8217;m still on the leinapp project folder) and you&amp;#8217;ll see the output of&amp;nbsp;main!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="clj"&gt;
&lt;h2&gt;clj&lt;/h2&gt;
&lt;p&gt;Using the clj is a more &lt;em&gt;modern&lt;/em&gt; approach to clojure development. As I said before the official clojure page seems to be biased towards
using this approach. The problem is that it seems to require Powershell to run as you can see on the  &lt;cite&gt;clj on Windows&lt;/cite&gt; page.&lt;/p&gt;
&lt;p&gt;Thankfully, the good people at the &lt;a class="reference external" href="https://clojurians.slack.com/"&gt;clojurians&lt;/a&gt; slack pointed me to &lt;a class="reference external" href="https://github.com/borkdude/deps.clj"&gt;deps.clj&lt;/a&gt; project. This is an implementation of clj in clojure and
can be installed natively on Windows by downloading the .zip &lt;a class="reference external" href="https://github.com/borkdude/deps.clj/releases"&gt;from the releases page&lt;/a&gt;. This zip should contain a deps.exe file. Put
that executable it in your path. You can also rename it to clj.exe if you want. Also if you have the powershell installed you can run this command from cmd.exe
&lt;tt class="docutils literal"&gt;PowerShell &lt;span class="pre"&gt;-Command&lt;/span&gt; &amp;quot;iwr &lt;span class="pre"&gt;-useb&lt;/span&gt; &lt;span class="pre"&gt;https://raw.githubusercontent.com/borkdude/deps.clj/master/install.ps1&lt;/span&gt; | iex&amp;quot;&lt;/tt&gt; to install it&amp;nbsp;automatically.&lt;/p&gt;
&lt;p&gt;You can now run &lt;tt class="docutils literal"&gt;deps&lt;/tt&gt; and you should get a clojure repl similar to &lt;tt class="docutils literal"&gt;lein repl&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;To create a new project skeleton you can use the
use the &lt;a class="reference external" href="https://github.com/seancorfield/deps-new"&gt;deps-new&lt;/a&gt; project. To install it run the following command from cmd.exe:
&lt;tt class="docutils literal"&gt;deps &lt;span class="pre"&gt;-Ttools&lt;/span&gt; install &lt;span class="pre"&gt;io.github.seancorfield/deps-new&lt;/span&gt; &lt;span class="pre"&gt;&amp;quot;{:git/tag&lt;/span&gt; &lt;span class="pre"&gt;&amp;quot;&amp;quot;&amp;quot;v0.4.9&amp;quot;&amp;quot;&amp;quot;}&amp;quot;&lt;/span&gt; :as new&lt;/tt&gt; (please notice that there are various
&lt;a class="reference external" href="https://clojure.org/reference/deps_and_cli#quoting"&gt;problems with the quoting on windows&lt;/a&gt; but this command should work&amp;nbsp;fine).&lt;/p&gt;
&lt;p&gt;To create a new app run: &lt;tt class="docutils literal"&gt;deps &lt;span class="pre"&gt;-Tnew&lt;/span&gt; app :name organization/depsapp&lt;/tt&gt; and you&amp;#8217;ll get your app in the &lt;tt class="docutils literal"&gt;depsapp&lt;/tt&gt; folder. If you want
a similar form as with lein, try &lt;tt class="docutils literal"&gt;deps &lt;span class="pre"&gt;-Tnew&lt;/span&gt; app :name depsapp/core &lt;span class="pre"&gt;:target-dir&lt;/span&gt; depsapp&lt;/tt&gt;. Now the &lt;tt class="docutils literal"&gt;depsapp&lt;/tt&gt; folder will&amp;nbsp;contain:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;deps.edn&lt;/tt&gt;: The basic descriptor of your project; here you can set various attrs of your project and also add dependencies. This more or less changes the project.clj we got from&amp;nbsp;leiningen.&lt;/li&gt;
&lt;li&gt;src\depsapp: The source directory of your project. This is where you&amp;#8217;ll put your&amp;nbsp;code.&lt;/li&gt;
&lt;li&gt;test\depsapp: Add tests&amp;nbsp;here&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To run the project, try: &lt;tt class="docutils literal"&gt;deps &lt;span class="pre"&gt;-M&lt;/span&gt; &lt;span class="pre"&gt;-m&lt;/span&gt; depsapp.core&lt;/tt&gt; or
&lt;tt class="docutils literal"&gt;deps&amp;nbsp; &lt;span class="pre"&gt;-M:run-m&lt;/span&gt;&lt;/tt&gt; or
&lt;tt class="docutils literal"&gt;deps&amp;nbsp; &lt;span class="pre"&gt;-X:run-x&lt;/span&gt;&lt;/tt&gt; to directly run the greet function (&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;run-m&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;run-x&lt;/span&gt;&lt;/tt&gt; are aliases defined in &lt;tt class="docutils literal"&gt;deps.edn&lt;/tt&gt; take a&amp;nbsp;peek).&lt;/p&gt;
&lt;p&gt;To start a &lt;span class="caps"&gt;REPL&lt;/span&gt;, run &lt;tt class="docutils literal"&gt;deps&lt;/tt&gt;. Notice this will start on the &lt;tt class="docutils literal"&gt;user&lt;/tt&gt; namespace, so you&amp;#8217;ll need to do something&amp;nbsp;like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;user=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;#39;depsapp.core&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;nil&lt;/span&gt;
&lt;span class="nv"&gt;user=&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;depsapp.core/foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to run a &lt;tt class="docutils literal"&gt;(foo)&lt;/tt&gt; function that you&amp;#8217;ve added in the &lt;tt class="docutils literal"&gt;core.clj&lt;/tt&gt; file.&lt;/p&gt;
&lt;p&gt;To run the tests use: &lt;tt class="docutils literal"&gt;deps &lt;span class="pre"&gt;-T:build&lt;/span&gt; test&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;To create the uberjar you&amp;#8217;ll run:
&lt;tt class="docutils literal"&gt;deps &lt;span class="pre"&gt;-T:build&lt;/span&gt; ci&lt;/tt&gt; (tests must pass). Then execute it directly using
&lt;tt class="docutils literal"&gt;java &lt;span class="pre"&gt;-jar&lt;/span&gt; &lt;span class="pre"&gt;target\core-0.1.0-&lt;span class="caps"&gt;SNAPSHOT&lt;/span&gt;.jar&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Also, notice that it&amp;#8217;s really simple to create a new project with deps without the deps-new. For example,
create a folder named &lt;tt class="docutils literal"&gt;manualapp&lt;/tt&gt; and in this folder
create a &lt;tt class="docutils literal"&gt;deps.edn&lt;/tt&gt; file containing just the string &lt;tt class="docutils literal"&gt;{}&lt;/tt&gt;. Then add another folder named &lt;tt class="docutils literal"&gt;src&lt;/tt&gt; with a  &lt;tt class="docutils literal"&gt;hello.clj&lt;/tt&gt; file
containing something&amp;nbsp;like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;ns &lt;/span&gt;&lt;span class="nv"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;run&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;println &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can then open a &lt;span class="caps"&gt;REPL&lt;/span&gt; on the project using &lt;tt class="docutils literal"&gt;deps&lt;/tt&gt; or run the run function using &lt;tt class="docutils literal"&gt;deps &lt;span class="pre"&gt;-X&lt;/span&gt; hello/run&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="vscode-integration"&gt;
&lt;h2&gt;VSCode&amp;nbsp;integration&lt;/h2&gt;
&lt;p&gt;Both leining and clj projects can easily be used with VSCode. First of all, install the calva package in your VSCode. Then, open your
clojure project in VScode and press &lt;tt class="docutils literal"&gt;ctrl+shift+p&lt;/tt&gt; to bring up the command pallete. Here write &amp;#8220;Jack&amp;#8221; (from jack-in) and select it
(also this has the shortctut &lt;tt class="docutils literal"&gt;ctrl+alt+c ctrl+alt+j&lt;/tt&gt;). Select the correct project type (&lt;tt class="docutils literal"&gt;leiningen&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;deps.edn&lt;/tt&gt;). A repl
will be opened to the side; you can then go to your core.clj file and run &lt;tt class="docutils literal"&gt;ctrl+alt+c enter&lt;/tt&gt; to load the current&amp;nbsp;file.&lt;/p&gt;
&lt;p&gt;Then you can move to the repl on the side and run the function with &lt;tt class="docutils literal"&gt;(foo)&lt;/tt&gt; or run &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(-main)&lt;/span&gt;&lt;/tt&gt;. Also you can write &lt;tt class="docutils literal"&gt;(foo)&lt;/tt&gt;
in your source file and press &lt;tt class="docutils literal"&gt;ctrl+enter&lt;/tt&gt; to execute it and see the result; the &lt;tt class="docutils literal"&gt;ctrl+enter&lt;/tt&gt; will execute the form where your
cursor is. See &lt;a class="reference external" href="https://calva.io/try-first/"&gt;this&lt;/a&gt; for&amp;nbsp;more.&lt;/p&gt;
&lt;/div&gt;
</content><category term="clojure"></category><category term="clojure"></category><category term="windows"></category><category term="cmd"></category></entry></feed>